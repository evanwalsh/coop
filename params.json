{"name":"Coop","body":"Ok, so let's say that you're the kind of person that wants to interact with [Co-op](http://coopapp.com) via its API.\r\n\r\nYou've come to the right place.\r\n\r\n## Installation and setup\r\n\r\nTo install it, just run `gem install coop` from the command line or add `gem 'coop'` to your project's Gemfile.\r\n\r\nNow, to use it in your code, do this, but substitute in your own Co-op login details:\r\n\r\n    coop = Coop.new(\"user_email@example.com\", \"user_password123\")\r\n\r\nThat's just the beginning, though.\r\n\r\n## Usage\r\n\r\nWith your new Co-op API object, you can access all the API features you'd need.\r\n\r\nFirst, you'll need a group object.\r\n\r\n    group = coop.group(12345)\r\n\r\n### Statuses\r\n\r\nThat'll give you access to a whole load of stuff. If you want statuses, use this:\r\n\r\n    group.statuses\r\n\r\nYou'll get an object that'll let you use .recent and .where on that to get either the most recent 50 statuses or to get statuses by user or date.\r\n\r\n    group.statuses.recent\r\n    group.statuses.where({ user_id: 54321, date: Date.today })\r\n\r\nYou'll get an array of Coop::Status objects, with all the attributes you'd expect. Cool.\r\n\r\nFinally, posting a status update is pretty simple.\r\n\r\n    group.post! \"This is a status update\"\r\n\r\nAlso, you can use `.post_as_cobot!` instead to, well, post as Cobot. Just add another argument with your secret key, like so:\r\n\r\n    group.post_as_cobot! \"This is Cobot. Beep boop.\", \"MySuperSecretAPIKeyFromCoOp\"\r\n\r\n### Agendas\r\n\r\nAlso, you can mess with the group's agendas API. Try this:\r\n\r\n    group.agenda\r\n\r\nIt returns a Coop::Agenda object, with `.global`, `.users`, `.user`, which will give you the group's agenda, all the user's individual agendas, and the authenticated user's agenda, respectively.\r\n\r\n### Users\r\n\r\nYou can get info about a specific user or a group's users. It's pretty simple.\r\n\r\nFor a group's users, just try this:\r\n\r\n    group.users.all\r\n\r\nThat'll get you the info dump of all the users. For a _specific_ user, you need their id. Then, you call:\r\n\r\n    group.users.find(12345)\r\n\r\nWhere \"12345\" would be that user's id. That'll get you just info for that user.\r\n\r\n### The rest of the API\r\n\r\nIn further versions of the gem, I'll be implementing the rest of the API. I want to keep it focused, for now. Also, the current Co-op API isn't working completely, so that's another roadblock that should be cleared up soon. I hope.","tagline":"Interact with the Co-op API","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}